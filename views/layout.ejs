<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body {
      background-color: #ffe6f0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    h1, h2 {
      color: #d63384;
    }

    a {
      color: #d63384;
      text-decoration: none;
    }

    .container {
      max-width: 700px;
      margin: 40px auto;
      background: #fff0f5;
      border-radius: 12px;
      box-shadow: 0 0 20px rgba(220, 53, 69, 0.1);
      padding: 30px;
    }

    .btn-primary {
      background-color: #ff69b4;
      border: none;
    }

    .btn-primary:hover {
      background-color: #ff85c1;
    }

    .btn-sos {
      background-color: #ff4d94;
      color: white;
      border: none;
    }

    .btn-sos:hover {
      background-color: #ff66a3;
      color: white;
    }

    .form-control:focus {
      border-color: #ffb6c1;
      box-shadow: 0 0 0 0.2rem rgba(255, 182, 193, 0.25);
    }

    nav.navbar {
      background-color: #ffd6e8;
    }

    .navbar-brand {
      font-weight: bold;
      color: #d63384 !important;
    }

    .text-pink {
      color: #d63384;
    }
  </style>
</head>
<body>

  <!-- Navbar -->
  <nav class="navbar navbar-light px-4">
    <span class="navbar-brand">EveSafe</span>
    <% if (typeof user !== 'undefined') { %>
  <div class="d-flex align-items-center gap-2">
    <span class="me-3"><strong><%= user.email %></strong></span>

    <% if (user.email === 'admin@evesafe.com') { %>
      <a href="/admin/reports" class="btn btn-outline-dark btn-sm">Admin Reports</a>
      <a href="/volunteers/admin" class="btn btn-primary btn-sm">Manage Volunteers</a>
    <% } %>

    <a href="/logout" class="btn btn-outline-danger btn-sm">Logout</a>
  </div>
<% } %>

  </nav>

  <!-- Main Content -->
  <div class="container">
    <%- body %>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- Voice SOS: floating mic button + keyword listener -->
<style>
  #voice-sos-btn {
    position: fixed; right: 16px; bottom: 16px; z-index: 9999;
    border: none; border-radius: 9999px; padding: 12px 16px;
    background:#ff4d94; color:#fff; font-weight:600; box-shadow: 0 6px 16px rgba(0,0,0,.15);
  }
  #voice-sos-btn.listening { background:#e11d48; }
  #voice-sos-hint {
    position: fixed; right: 16px; bottom: 64px; z-index: 9998;
    background: #fff; color:#333; padding:8px 12px; border-radius:8px;
    box-shadow:0 4px 12px rgba(0,0,0,.12); display:none;
  }
</style>

<button id="voice-sos-btn" type="button">ðŸŽ¤ Voice SOS</button>
<div id="voice-sos-hint">Say: <strong>help</strong></div>

<script>
(function(){
  // ===== CONFIG =====
  const KEYWORD = 'help';     // change if needed (use 'bn-BD' + Bangla word for Bangla)
  const LANG = 'en-US';
  const DEBOUNCE_MS = 5000;   // ignore repeats within 5s

  const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (!SR) { console.warn('[VoiceSOS] SpeechRecognition not supported'); return; }

  let rec, listening = false, lastTriggerAt = 0;

  const norm = s => (s || '').toLowerCase().replace(/[^\p{L}\p{N}\s]/gu, ' ');
  const hasKeyword = t => norm(t).split(/\s+/).includes(KEYWORD.toLowerCase()); // word-level match

  function primeMicPermission(){
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) return;
    navigator.mediaDevices.getUserMedia({ audio: true })
      .then(() => console.log('[VoiceSOS] mic permission ok'))
      .catch(() => console.log('[VoiceSOS] mic permission not granted yet'));
  }

  function startListening(){
    if (listening) return;
    rec = new SR();
    rec.lang = LANG;
    rec.continuous = true;
    rec.interimResults = true;
    rec.maxAlternatives = 3;

    rec.onstart = () => {
      listening = true;
      console.log('[VoiceSOS] listening started');
    };

    rec.onresult = (e) => {
      let heard = '';
      for (let i = e.resultIndex; i < e.results.length; i++) {
        for (let a = 0; a < Math.min(3, e.results[i].length); a++) {
          heard += ' ' + (e.results[i][a]?.transcript || '');
        }
      }
      console.log('[VoiceSOS] heard:', heard);

      if (Date.now() - lastTriggerAt < DEBOUNCE_MS) return;

      if (hasKeyword(heard)) {
        lastTriggerAt = Date.now();
        console.log('[VoiceSOS] keyword detected â†’ sending SOS');
        fetch('/sos', { method: 'POST' })
          .then(() => {
            console.log('[VoiceSOS] SOS POST sent; re-arming mic');
            // Briefly stop & restart to keep recognition fresh
            try { rec.stop(); } catch (_){}
            setTimeout(() => { try { rec.start(); } catch(_){ attachGestureOnce(); } }, 300);
          })
          .catch(err => console.warn('[VoiceSOS] SOS POST failed', err));
      }
    };

    rec.onerror = (err) => {
      console.warn('[VoiceSOS] error', err);
      // Some errors (e.g., "no-speech", "aborted") are normal; attempt restart:
      try { rec.stop(); } catch(_){}
      setTimeout(() => { try { rec.start(); } catch(_){ attachGestureOnce(); } }, 500);
    };

    rec.onend = () => {
      console.log('[VoiceSOS] recognition ended; restarting if allowed');
      try { rec.start(); } catch(_){ attachGestureOnce(); }
    };

    try { rec.start(); } catch (e) {
      console.log('[VoiceSOS] start() blocked; will wait for tiny interaction');
      attachGestureOnce();
    }
  }

  function attachGestureOnce(){
    const once = () => {
      window.removeEventListener('pointerdown', once, { once:true });
      window.removeEventListener('keydown', once, { once:true });
      window.removeEventListener('scroll', once, { once:true });
      window.removeEventListener('touchstart', once, { once:true });
      startListening();
    };
    window.addEventListener('pointerdown', once, { once:true });
    window.addEventListener('keydown', once, { once:true });
    window.addEventListener('scroll', once, { once:true, passive:true });
    window.addEventListener('touchstart', once, { once:true });
    console.log('[VoiceSOS] waiting for first tiny interaction to start micâ€¦');
  }

  // Prime permission and attempt to auto-start
  primeMicPermission();
  startListening();
})();
</script>

</body>
</html>
