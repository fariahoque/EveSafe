<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    /* Page background and fonts */
    body {
      background-color: #FCE4EC; /* Light pink background */
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      color: #212121;
    }

    /* Headings and links */
    h1, h2 {
      color: #C2185B;
    }

    a {
      color: #C2185B;
      text-decoration: none;
    }

    /* Container style */
    .container {
      max-width: 700px;
      margin: 40px auto;
      background: #fff0f5;
      border-radius: 12px;
      box-shadow: 0 0 20px rgba(173, 20, 87, 0.15);
      padding: 30px;
    }

    /* Buttons */
    .btn-primary {
      background-color: #AD1457;
      border: none;
      color: white;
    }

    .btn-primary:hover {
      background-color: #8E0E45;
      color: white;
    }

    .btn-sos {
      background-color: #AD1457;
      color: white;
      border: none;
    }

    .btn-sos:hover {
      background-color: #8E0E45;
      color: white;
    }

    /* Focus styles for inputs */
    .form-control:focus {
      border-color: #C2185B;
      box-shadow: 0 0 0 0.2rem rgba(173, 20, 87, 0.25);
    }

    /* Navbar */
    nav.navbar {
      background-color: #FCE4EC;
    }

    .navbar-brand {
      font-weight: bold;
      color: #C2185B !important;
    }

    /* Text utility class */
    .text-pink {
      color: #C2185B;
    }

    /* Floating Voice SOS button */
    #voice-sos-btn {
      position: fixed; 
      right: 16px; 
      bottom: 16px; 
      z-index: 9999;
      border: none; 
      border-radius: 9999px; 
      padding: 12px 16px;
      background:#AD1457; 
      color:#fff; 
      font-weight:600; 
      box-shadow: 0 6px 16px rgba(0,0,0,.15);
    }

    #voice-sos-btn.listening { 
      background:#C2185B; 
    }

    #voice-sos-hint {
      position: fixed; 
      right: 16px; 
      bottom: 64px; 
      z-index: 9998;
      background: #fff; 
      color:#333; 
      padding:8px 12px; 
      border-radius:8px;
      box-shadow:0 4px 12px rgba(0,0,0,.12); 
      display:none;
    }
  </style>
</head>
<body>

  <!-- Navbar -->
  <nav class="navbar navbar-light px-4">
    <span class="navbar-brand">EveSafe</span>
    <% if (typeof user !== 'undefined') { %>
      <div class="d-flex align-items-center gap-2">
        <span class="me-3"><strong><%= user.email %></strong></span>

        <% if (user.email === 'admin@evesafe.com') { %>
          <a href="/admin/reports" class="btn btn-outline-dark btn-sm">Admin Reports</a>
          <a href="/volunteers/admin" class="btn btn-primary btn-sm">Manage Volunteers</a>
        <% } %>

        <a href="/logout" class="btn btn-outline-danger btn-sm">Logout</a>
      </div>
    <% } %>
  </nav>

  <!-- Main Content -->
  <div class="container">
    <%- body %>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Floating Voice SOS -->
  <button id="voice-sos-btn" type="button">ðŸŽ¤ Voice SOS</button>
  <div id="voice-sos-hint">Say: <strong>help</strong></div>

  <script>
    /* prevent double initialization if layout gets included twice */
    if (window.__VOICE_SOS_INIT__) {
      console.log('[VoiceSOS] already initialized; skip');
    } else {
      window.__VOICE_SOS_INIT__ = true;

      (function(){
        const KEYWORD = 'help';
        const LANG = 'en-US';
        const DEBOUNCE_MS = 5000;

        const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
        if (!SR) { console.warn('[VoiceSOS] SpeechRecognition not supported'); return; }

        let rec, listening = false, lastTriggerAt = 0, enabledByUser = false;

        const norm = s => (s || '').toLowerCase().replace(/[^\p{L}\p{N}\s]/gu, ' ');
        const hasKeyword = t => norm(t).split(/\s+/).includes(KEYWORD.toLowerCase());

        function primeMicPermission(){
          if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) return;
          navigator.mediaDevices.getUserMedia({ audio: true })
            .then(() => console.log('[VoiceSOS] mic permission ok'))
            .catch(() => console.log('[VoiceSOS] mic permission not granted yet'));
        }

        function startListening(){
          if (listening) return;
          rec = new SR();
          rec.lang = LANG;
          rec.continuous = true;
          rec.interimResults = true;
          rec.maxAlternatives = 3;

          rec.onstart = () => {
            listening = true;
            console.log('[VoiceSOS] listening started');
            document.getElementById('voice-sos-btn')?.classList.add('listening');
            document.getElementById('voice-sos-hint').style.display = 'block';
          };

          rec.onresult = (e) => {
            let heard = '';
            for (let i = e.resultIndex; i < e.results.length; i++) {
              for (let a = 0; a < Math.min(3, e.results[i].length); a++) {
                heard += ' ' + (e.results[i][a]?.transcript || '');
              }
            }

            if (Date.now() - lastTriggerAt < DEBOUNCE_MS) return;

            if (hasKeyword(heard)) {
              lastTriggerAt = Date.now();
              console.log('[VoiceSOS] keyword detected â†’ sending SOS');
              fetch('/sos', { method: 'POST', credentials: 'same-origin' })
                .then(() => {
                  console.log('[VoiceSOS] SOS POST sent; re-arming mic');
                  try { rec.stop(); } catch (_){}
                  setTimeout(() => { 
                    try { rec.start(); } catch(_){ attachGestureOnce(); } 
                  }, 800); // slower restart to avoid 'aborted'
                })
                .catch(err => console.warn('[VoiceSOS] SOS POST failed', err));
            }
          };

          rec.onerror = (err) => {
            console.warn('[VoiceSOS] error', err);
            if (err?.error === 'aborted') {
              // harmless when we intentionally stop+restart
              return;
            }
            try { rec.stop(); } catch(_){}
            if (enabledByUser) {
              setTimeout(() => { 
                try { rec.start(); } catch(_){ attachGestureOnce(); } 
              }, 800); // slower restart
            }
          };

          rec.onend = () => {
            console.log('[VoiceSOS] recognition ended; restarting with backoff');
            listening = false;
            document.getElementById('voice-sos-btn')?.classList.remove('listening');
            document.getElementById('voice-sos-hint').style.display = 'none';
            if (enabledByUser) {
              setTimeout(() => { 
                try { rec.start(); } catch(_){ attachGestureOnce(); } 
              }, 800);
            } else {
              console.log('[VoiceSOS] waiting for first tiny interaction to start micâ€¦');
            }
          };

          try { rec.start(); } catch (e) {
            console.log('[VoiceSOS] start() blocked; will wait for tiny interaction');
            attachGestureOnce();
          }
        }

        function attachGestureOnce(){
          const once = () => {
            window.removeEventListener('pointerdown', once, { once:true });
            window.removeEventListener('keydown', once, { once:true });
            window.removeEventListener('scroll', once, { once:true });
            window.removeEventListener('touchstart', once, { once:true });
            startListening();
          };
          window.addEventListener('pointerdown', once, { once:true });
          window.addEventListener('keydown', once, { once:true });
          window.addEventListener('scroll', once, { once:true, passive:true });
          window.addEventListener('touchstart', once, { once:true });
          console.log('[VoiceSOS] waiting for first tiny interaction to start micâ€¦');
        }

        // let the button act as the required user gesture to "arm" recognition
        document.getElementById('voice-sos-btn')?.addEventListener('click', () => {
          enabledByUser = true;
          if (!listening) attachGestureOnce();
        });

        primeMicPermission();
        startListening();
      })();

    } /* end single-init guard */
  </script>
</body>
</html>
